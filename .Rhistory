my_ymd_hms <- function(datetime_str) {
h <- datetime_str %>%
str_split(" ")
if(h[[1]][4] == "오후") {
if(h[[1]][5] != "12시")
hour <- str_extract(h[[1]][5], pattern = "^[0-9]+")
hour <- as.numeric(hour) + 12
h[[1]][5] <- str_c(hour, "시")
}
if(h[[1]][4] == "오전" && h[[1]][5] == "12시")
h[[1]][5] <- "0시"
if(h[[1]][8] == "KST")
utc = "Asia/Seoul"
if(h[[1]][8] == "JST")
utc = "Asia/Tokyo"
if(h[[1]][8] == "CST")
utc = "Asia/Shanghai"
h <- str_c(h[[1]][1:7], collapse = " ")
return(ymd_hms(h, tz = utc))
}
my_ymd_hms("2017년 6월 3일 오전 11시 0분 0초 JST")
my_ymd_hms <- function(datetime_str) {
h <- datetime_str %>%
str_split(" ")
if(h[[1]][4] == "오후") {
if(h[[1]][5] != "12시")
hour <- str_extract(h[[1]][5], pattern = "^[0-9]+")
hour <- as.numeric(hour) + 12
h[[1]][5] <- str_c(hour, "시")
}
if(h[[1]][4] == "오전" && h[[1]][5] == "12시")
h[[1]][5] <- "0시"
if(h[[1]][8] == "KST")
utc = "Asia/Seoul"
if(h[[1]][8] == "JST")
utc = "Asia/Tokyo"
if(h[[1]][8] == "CST")
utc = "Asia/Shanghai"
h <- str_c(h[[1]][1:7], collapse = " ")
return(ymd_hms(h, tz = utc))
}
my_ymd_hms("2017년 6월 3일 오전 12시 0분 0초 JST")
my_ymd_hms <- function(datetime_str) {
h <- datetime_str %>%
str_split(" ")
if(h[[1]][4] == "오후") {
if(h[[1]][5] != "12시")
hour <- str_extract(h[[1]][5], pattern = "^[0-9]+")
hour <- as.numeric(hour) + 12
h[[1]][5] <- str_c(hour, "시")
}
if(h[[1]][4] == "오전" && h[[1]][5] == "12시")
h[[1]][5] <- "0시"
if(h[[1]][8] == "KST")
utc = "Asia/Seoul"
if(h[[1]][8] == "JST")
utc = "Asia/Tokyo"
if(h[[1]][8] == "CST")
utc = "Asia/Shanghai"
h <- c(h[[1]][1:3], h[[1][5:7]])
my_ymd_hms <- function(datetime_str) {
h <- datetime_str %>%
str_split(" ")
if(h[[1]][4] == "오후") {
if(h[[1]][5] != "12시")
hour <- str_extract(h[[1]][5], pattern = "^[0-9]+")
hour <- as.numeric(hour) + 12
h[[1]][5] <- str_c(hour, "시")
}
if(h[[1]][4] == "오전" && h[[1]][5] == "12시")
h[[1]][5] <- "0시"
if(h[[1]][8] == "KST")
utc = "Asia/Seoul"
if(h[[1]][8] == "JST")
utc = "Asia/Tokyo"
if(h[[1]][8] == "CST")
utc = "Asia/Shanghai"
h <- c(h[[1]][1:3], h[[1]][5:7])
h <- str_c(h, collapse = " ")
return(ymd_hms(h, tz = utc))
}
my_ymd_hms("2017년 6월 3일 오전 12시 0분 0초 JST")
my_ymd_hms <- function(datetime_str) {
h <- datetime_str %>%
str_split(" ")
if(h[[1]][4] == "오후") {
if(h[[1]][5] != "12시")
hour <- str_extract(h[[1]][5], pattern = "^[0-9]+")
hour <- as.numeric(hour) + 12
h[[1]][5] <- str_c(hour, "시")
}
if(h[[1]][4] == "오전" && h[[1]][5] == "12시")
h[[1]][5] <- "0시"
if(h[[1]][8] == "KST")
utc = "Asia/Seoul"
if(h[[1]][8] == "JST")
utc = "Asia/Tokyo"
if(h[[1]][8] == "CST")
utc = "Asia/Shanghai"
h <- c(h[[1]][1:3], h[[1]][5:7])
h <- str_c(h, collapse = " ")
return(ymd_hms(h, tz = utc))
}
my_ymd_hms("2017년 6월 3일 오전 11시 0분 0초 JST")
my_ymd_hms <- function(datetime_str) {
h <- datetime_str %>%
str_split(" ")
if(h[[1]][4] == "오후") {
if(h[[1]][5] != "12시")
hour <- str_extract(h[[1]][5], pattern = "^[0-9]+")
hour <- as.numeric(hour) + 12
h[[1]][5] <- str_c(hour, "시")
}
if(h[[1]][4] == "오전" && h[[1]][5] == "12시")
h[[1]][5] <- "0시"
if(h[[1]][8] == "KST")
utc = "Asia/Seoul"
if(h[[1]][8] == "JST")
utc = "Asia/Tokyo"
if(h[[1]][8] == "CST")
utc = "Asia/Shanghai"
h <- c(h[[1]][1:3], h[[1]][5:7])
h <- str_c(h, collapse = " ")
return(ymd_hms(h, tz = utc))
}
my_ymd_hms("2017년 6월 3일 오후 8시 0분 0초 JST")
my_ymd_hms <- function(datetime_str) {
h <- datetime_str %>%
str_split(" ")
if(h[[1]][4] == "오후") {
if(h[[1]][5] != "12시")
hour <- str_extract(h[[1]][5], pattern = "^[0-9]+")
hour <- as.numeric(hour) + 12
h[[1]][5] <- str_c(hour, "시")
}
if(h[[1]][4] == "오전" && h[[1]][5] == "12시")
h[[1]][5] <- "0시"
if(h[[1]][8] == "KST")
utc = "Asia/Seoul"
if(h[[1]][8] == "JST")
utc = "Asia/Tokyo"
if(h[[1]][8] == "CST")
utc = "Asia/Shanghai"
h <- c(h[[1]][1:3], h[[1]][5:7])
h <- str_c(h, collapse = " ")
return(ymd_hms(h, tz = utc))
}
my_ymd_hms("2017년 6월 3일 오전 12시 0분 0초 JST")
my_ymd_hms <- function(datetime_str) {
h <- datetime_str %>%
str_split(" ")
if(h[[1]][4] == "오후") {
if(h[[1]][5] != "12시")
hour <- str_extract(h[[1]][5], pattern = "^[0-9]+")
hour <- as.numeric(hour) + 12
h[[1]][5] <- str_c(hour, "시")
}
if(h[[1]][4] == "오전" && h[[1]][5] == "12시")
h[[1]][5] <- "0시"
if(h[[1]][8] == "KST")
utc = "Asia/Seoul"
if(h[[1]][8] == "JST")
utc = "Asia/Tokyo"
if(h[[1]][8] == "CST")
utc = "Asia/Shanghai"
h <- c(h[[1]][1:3], h[[1]][5:7])
h <- str_c(h, collapse = " ")
return(ymd_hms(h, tz = utc))
}
my_ymd_hms("2017년 6월 3일 오전 1시 0분 0초 JST")
my_ymd_hms <- function(datetime_str) {
h <- datetime_str %>%
str_split(" ")
if(h[[1]][4] == "오후") {
if(h[[1]][5] != "12시")
hour <- str_extract(h[[1]][5], pattern = "^[0-9]+")
hour <- as.numeric(hour) + 12
h[[1]][5] <- str_c(hour, "시")
}
if(h[[1]][4] == "오전" && h[[1]][5] == "12시")
h[[1]][5] <- "0시"
if(h[[1]][8] == "KST")
utc = "Asia/Seoul"
if(h[[1]][8] == "JST")
utc = "Asia/Tokyo"
if(h[[1]][8] == "CST")
utc = "Asia/Shanghai"
h <- c(h[[1]][1:3], h[[1]][5:7])
h <- str_c(h, collapse = " ")
return(ymd_hms(h, tz = utc))
}
my_ymd_hms("2017년 6월 3일 오전 12시 0분 0초 JST")
my_ymd_hms <- function(datetime_str) {
h <- datetime_str %>%
str_split(" ")
if(h[[1]][4] == "오후") {
if(h[[1]][5] != "12시")
hour <- str_extract(h[[1]][5], pattern = "^[0-9]+")
hour <- as.numeric(hour) + 12
h[[1]][5] <- str_c(hour, "시")
}
if(h[[1]][4] == "오전" && h[[1]][5] == "12시")
h[[1]][5] <- "0시"
if(h[[1]][8] == "KST")
utc = "Asia/Seoul"
if(h[[1]][8] == "JST")
utc = "Asia/Tokyo"
if(h[[1]][8] == "CST")
utc = "Asia/Shanghai"
h <- c(h[[1]][1:3], h[[1]][5:7])
h <- str_c(h, collapse = " ")
return(ymd_hms(h, tz = utc))
}
ymd_hms("2017-06-03 00:50:52", tz="Asia/Tokyo")
ymd_hms("2017-06-03 00:00:00", tz="Asia/Tokyo")
ymd_hms("2017-06-03 00:00:00", tz="Asia/Tokyo")
ymd_hms("2014-11-12 00:00:00", tz="Asia/Seoul")
ymd_hms("2014-11-12 00:00:00", tz="Asia/Seoul")
red_data <- read_csv("https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv")
library(readr)
red_data <- read_csv("https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv")
red_data
red_data <- read_csv("https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv", sep = ";")
red_data <- read_csv("https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv", del = ";")
red_data <- read_table("https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv", del = ";")
red_data <- read_delim("https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv", del = ";")
red_data
white_data <- read_delim("https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv", del = ";")
red_data %>%
mutate(type = "red")
red_data <- red_data %>%
mutate(type = "red")
white_data <- white_data %>%
mutate(type = "white")
white_data <- white_data %>%
mutate(type = "white")
white_data <- white_data %>%
mutate(type = "white")
red_data <- red_data %>%
mutate(type = "red")
white_data <- white_data %>%
mutate(type = "white")
white_data
white_data %>%
select(type)
white_data %>%
select(type) %>%
tail(5)
set.seed(2021)
white_sampled_data <-
white_data %>%
sample_n(size = nrow(red_data))
white_sampled_data <-
white_data %>%
sample_n(size = nrow(red_data), replace = FALSE)
white_sampled_data
wine_data <- rbind(white_sampled_data, red_data)
wine_data
wine_data %>%
mutate(type = as.factor(type), quality = as.factor(quality))
wine_data <- wine_data %>%
mutate(type = as.factor(type), quality = as.factor(quality))
library(MASS)
head(Boston)
fit1 <- lm(nox ~ poly(dis, 3))
fit1 <- lm(nox ~ poly(dis, 3), data = Boston)
summary(fit1)
plot(fit1)
library(ggplot2)
Boston %>%
select(dis) %>%
unique()
Boston %>%
select(dis) %>%
unique()
Boston %>%
dpylr::select(dis) %>%
unique()
library(dplyr)
Boston %>%
dpylr::select(dis) %>%
unique()
Boston %>%
dplyr::select(dis) %>%
unique()
Boston %>%
dplyr::select(dis) %>%
unique()
Boston %>%
dplyr::select(dis) %>%
arrange(dis)
Boston %>%
dplyr::select(dis) %>%
arrange(desc(dis))
ggplot(data = Boston) +
geom_point(mapping = aes(x = dis, y = nox)) +
geom_point(mapping = aes(x = seq(from = 1, to = 12.1, by = 0.01), y = predict(fit1, seq(from = 1, to = 12.1, by = 0.01))))
df <- data.frame(x = seq(from = 1, to = 12.1, by = 0.01), y = predict(fit1, seq(from = 1, to = 12.1, by = 0.01))))
df <- data.frame(x = seq(from = 1, to = 12.1, by = 0.01), y = predict(fit1, seq(from = 1, to = 12.1, by = 0.01)))
df <- data.frame(x = seq(from = 1, to = 12.1, by = 0.01), y = predict(fit1, seq(from = 1, to = 12.1, by = 0.01))
df
df
df <- data.frame(x = seq(from = 1, to = 12.1, by = 0.01), y = predict(fit1, seq(from = 1, to = 12.1, by = 0.01))
df <- data.frame(x = seq(from = 1, to = 12.1, by = 0.01), y = predict(fit1, seq(from = 1, to = 12.1, by = 0.01)))
df <- data.frame(x = seq(from = 1, to = 12.1, by = 0.01), y = predict(fit1, seq(from = 1, to = 12.1, by = 0.01)))
predict(fit1, seq(from = 1, to = 12.1, by = 0.01))
predict(fit1, data.frame((from = 1, to = 12.1, by = 0.01)))
predict(fit1, data.frame((from = 1, to = 12.1, by = 0.01)))
predict(fit1, data.frame(seq(from = 1, to = 12.1, by = 0.01)))
predict(fit1, data.frame(dis = seq(from = 1, to = 12.1, by = 0.01)))
df <- data.frame(x = seq(from = 1, to = 12.1, by = 0.01), y = predict(fit1, data.frame(dis = seq(from = 1, to = 12.1, by = 0.01))))
ggplot(data = Boston) +
geom_point(mapping = aes(x = dis, y = nox)) +
geom_point(mapping = aes(x = x, y = y), data = df)
ggplot(data = Boston) +
geom_point(mapping = aes(x = dis, y = nox)) +
geom_point(mapping = aes(x = x, y = y), data = df, col = "red")
for(i in deg) {
fit_vec[i] <- lm(nox ~ poly(dis, i), data = Boston)
}
deg <- 1:10
fit_vec <- c()
for(i in deg) {
fit_vec[i] <- lm(nox ~ poly(dis, i), data = Boston)
}
fit_vec[1]
summary(fit_vec[1])
fit_vec[[1]]
fit_vec[[1]][1]
fit_vec
fit1
fit_vec[1]
summary(fit_vec)
summary(fit_vec[[1]])
summary(fit_vec[1])
summary(fit_vec)
deg <- 1:10
for(i in deg) {
fit <- lm(nox ~ poly(dis, i), data = Boston)
df <- data.frame(x = seq(from = 1, to = 12.1, by = 0.01), y = predict(fit, data.frame(dis = seq(from = 1, to = 12.1, by = 0.01))))
ggplot(data = Boston) +
geom_point(mapping = aes(x = dis, y = nox)) +
geom_point(mapping = aes(x = x, y = y), data = df, col = "red")
}
for(i in deg) {
fit <- lm(nox ~ poly(dis, i), data = Boston)
df <- data.frame(x = seq(from = 1, to = 12.1, by = 0.01), y = predict(fit, data.frame(dis = seq(from = 1, to = 12.1, by = 0.01))))
print(ggplot(data = Boston) +
geom_point(mapping = aes(x = dis, y = nox)) +
geom_point(mapping = aes(x = x, y = y), data = df, col = "red"))
}
fit$fitted.values
fit$df.residual
sum_fit <- summary(fit)
deg <- 1:10
for(i in deg) {
fit <- lm(nox ~ poly(dis, i), data = Boston)
df <- data.frame(x = seq(from = 1, to = 12.1, by = 0.01), y = predict(fit, data.frame(dis = seq(from = 1, to = 12.1, by = 0.01))))
print(ggplot(data = Boston) +
geom_point(mapping = aes(x = dis, y = nox)) +
geom_point(mapping = aes(x = x, y = y), data = df, col = "red"))
sum_fit <- summary(fit)
print(sum_fit$adj.r.squared)
}
library(splines)
fit2 <- lm(nox ~ bs(dis, knots = c(25,40,60)), data = Boston)
summary(fit2)
library(NHANES)
library(dplyr)
library(dplyr)
```{r}
library(olsrr)
library(glmnet)
health_df <- NHANES %>%
select(Gender, Age, Race1, Education, HHIncome, HomeOwn, Height, BMI, Diabetes) %>%
filter(complete.cases(.)) %>%
mutate(male = ifelse(Gender == "male", 1, 0), white = ifelse(Race1 == "White", 1, 0), black = ifelse(Race1 == "Black", 1, 0), hs = ifelse(Education %in% c("HighSchool", "SomeCollege", "CollegeGrad"), 1, 0), income_high = ifelse(HHIncome %in% c("75000-99999", "more 99999"), 1, 0), income_low = ifelse(HHIncome %in% c("0-4999", "5000-9999", "10000-14999", "15000-19999", "20000-24999"), 1, 0), own = ifelse(HomeOwn == "Home", 1, 0), dia_yes = ifelse(Diabetes == "Yes", 1, 0)) %>%
select(male, Age, white, black, hs, income_high, income_low, BMI, Height, own, dia_yes)
head(health_df, 3)
health_df <- NHANES %>%
select(Gender, Age, Race1, Education, HHIncome, HomeOwn, Height, BMI, Diabetes) %>%
filter(complete.cases(.)) %>%
mutate(male = ifelse(Gender == "male", 1, 0), white = ifelse(Race1 == "White", 1, 0), black = ifelse(Race1 == "Black", 1, 0), hs = ifelse(Education %in% c("HighSchool", "SomeCollege", "CollegeGrad"), 1, 0), income_high = ifelse(HHIncome %in% c("75000-99999", "more 99999"), 1, 0), income_low = ifelse(HHIncome %in% c("0-4999", "5000-9999", "10000-14999", "15000-19999", "20000-24999"), 1, 0), own = ifelse(HomeOwn == "Home", 1, 0), dia_yes = ifelse(Diabetes == "Yes", 1, 0)) %>%
select(male, Age, white, black, hs, income_high, income_low, BMI, Height, own, dia_yes)
head(health_df, 3)
library(NHANES)
library(dplyr)
library(olsrr)
library(glmnet)
health_df <- NHANES %>%
select(Gender, Age, Race1, Education, HHIncome, HomeOwn, Height, BMI, Diabetes) %>%
filter(complete.cases(.)) %>%
mutate(male = ifelse(Gender == "male", 1, 0), white = ifelse(Race1 == "White", 1, 0), black = ifelse(Race1 == "Black", 1, 0), hs = ifelse(Education %in% c("HighSchool", "SomeCollege", "CollegeGrad"), 1, 0), income_high = ifelse(HHIncome %in% c("75000-99999", "more 99999"), 1, 0), income_low = ifelse(HHIncome %in% c("0-4999", "5000-9999", "10000-14999", "15000-19999", "20000-24999"), 1, 0), own = ifelse(HomeOwn == "Home", 1, 0), dia_yes = ifelse(Diabetes == "Yes", 1, 0)) %>%
select(male, Age, white, black, hs, income_high, income_low, BMI, Height, own, dia_yes)
head(health_df, 3)
library(NHANES)
library(dplyr)
library(olsrr)
library(glmnet)
health_df <- NHANES %>%
select(Gender, Age, Race1, Education, HHIncome, HomeOwn, Height, BMI, Diabetes) %>%
filter(complete.cases(.)) %>%
mutate(male = ifelse(Gender == "male", 1, 0), white = ifelse(Race1 == "White", 1, 0), black = ifelse(Race1 == "Black", 1, 0), hs = ifelse(Education %in% c("HighSchool", "SomeCollege", "CollegeGrad"), 1, 0), income_high = ifelse(HHIncome %in% c("75000-99999", "more 99999"), 1, 0), income_low = ifelse(HHIncome %in% c("0-4999", "5000-9999", "10000-14999", "15000-19999", "20000-24999"), 1, 0), own = ifelse(HomeOwn == "Home", 1, 0), dia_yes = ifelse(Diabetes == "Yes", 1, 0)) %>%
select(male, Age, white, black, hs, income_high, income_low, BMI, Height, own, dia_yes)
NHANES
health_df <- NHANES %>%
dplyr::select(Gender, Age, Race1, Education, HHIncome, HomeOwn, Height, BMI, Diabetes) %>%
filter(complete.cases(.)) %>%
mutate(male = ifelse(Gender == "male", 1, 0), white = ifelse(Race1 == "White", 1, 0), black = ifelse(Race1 == "Black", 1, 0), hs = ifelse(Education %in% c("HighSchool", "SomeCollege", "CollegeGrad"), 1, 0), income_high = ifelse(HHIncome %in% c("75000-99999", "more 99999"), 1, 0), income_low = ifelse(HHIncome %in% c("0-4999", "5000-9999", "10000-14999", "15000-19999", "20000-24999"), 1, 0), own = ifelse(HomeOwn == "Home", 1, 0), dia_yes = ifelse(Diabetes == "Yes", 1, 0)) %>%
select(male, Age, white, black, hs, income_high, income_low, BMI, Height, own, dia_yes)
health_df <- NHANES %>%
dplyr::select(Gender, Age, Race1, Education, HHIncome, HomeOwn, Height, BMI, Diabetes) %>%
filter(complete.cases(.)) %>%
mutate(male = ifelse(Gender == "male", 1, 0), white = ifelse(Race1 == "White", 1, 0), black = ifelse(Race1 == "Black", 1, 0), hs = ifelse(Education %in% c("HighSchool", "SomeCollege", "CollegeGrad"), 1, 0), income_high = ifelse(HHIncome %in% c("75000-99999", "more 99999"), 1, 0), income_low = ifelse(HHIncome %in% c("0-4999", "5000-9999", "10000-14999", "15000-19999", "20000-24999"), 1, 0), own = ifelse(HomeOwn == "Home", 1, 0), dia_yes = ifelse(Diabetes == "Yes", 1, 0)) %>%
dplyr::select(male, Age, white, black, hs, income_high, income_low, BMI, Height, own, dia_yes)
head(health_df, 3)
x <- model.matrix(Height ~ Age + I(Age^2) + I(Age^3) + I(Age^4) + I(Age^5), data = health_df)
y <- health_df$Height
cv.out <- cv.glmnet(x, y, alpha = 1)
bestlam <- cv.out$lambda.min
bestlam
x <- model.matrix(Height ~ Age + I(Age^2) + I(Age^3) + I(Age^4) + I(Age^5), data = health_df, 1)
cv.out <- cv.glmnet(x, y, alpha = 1)
bestlam <- cv.out$lambda.min
bestlam
x <- model.matrix(Height ~ Age + Age2 + Age3 + Age4 + Age5, data = health_df %>% mutate(Age2 = Age^2, Age3 = Age^3, Age4 = Age^4, Age5 = Age^5))[, -1]
y <- health_df$Height
cv.out <- cv.glmnet(x, y, alpha = 1)
bestlam <- cv.out$lambda.min
bestlam
x <- model.matrix(Height ~ Age + I(Age^2) + I(Age^3) + I(Age^4) + I(Age^5), data = health_df, 1)
x
x <- model.matrix(Height ~ Age + Age2 + Age3 + Age4 + Age5, data = health_df %>% mutate(Age2 = Age^2, Age3 = Age^3, Age4 = Age^4, Age5 = Age^5))[, -1]
x
x <- model.matrix(Height ~ 1 + Age + Age2 + Age3 + Age4 + Age5, data = health_df %>% mutate(Age2 = Age^2, Age3 = Age^3, Age4 = Age^4, Age5 = Age^5))[, -1]
y <- health_df$Height
x <- model.matrix(Height ~ 1 + Age + Age2 + Age3 + Age4 + Age5, data = health_df %>% mutate(Age2 = Age^2, Age3 = Age^3, Age4 = Age^4, Age5 = Age^5))[, -1]
x
x <- model.matrix(Height ~ Age + I(Age^2) + I(Age^3) + I(Age^4) + I(Age^5), data = health_df)
x
y <- health_df$Height
cv.out <- cv.glmnet(x, y, alpha = 1)
plot(cv.out)
bestlam <- cv.out$lambda.min
bestlam
x <- model.matrix(Height ~ Age + I(Age^2) + I(Age^3) + I(Age^4) + I(Age^5), data = health_df)
x
x <- model.matrix(Height ~ Age + I(Age^2) + I(Age^3) + I(Age^4) + I(Age^5), data = health_df)
x <- model.matrix(Height ~ Age + I(Age^2) + I(Age^3) + I(Age^4) + I(Age^5), data = health_df)
# x <- model.matrix(Height ~ Age + Age2 + Age3 + Age4 + Age5, data = health_df %>% mutate(Age2 = Age^2, Age3 = Age^3, Age4 = Age^4, Age5 = Age^5))[, -1]
y <- health_df$Height
cv.out <- cv.glmnet(x, y, alpha = 1)
lasso_model <- glmnet(x, y, alpha = 1, lambda = bestlam)
bestlam <- cv.out$lambda.min
bestlam
x <- model.matrix(Height ~ Age + I(Age^2) + I(Age^3) + I(Age^4) + I(Age^5), data = health_df)
# x <- model.matrix(Height ~ Age + Age2 + Age3 + Age4 + Age5, data = health_df %>% mutate(Age2 = Age^2, Age3 = Age^3, Age4 = Age^4, Age5 = Age^5))[, -1]
y <- health_df$Height
cv.out <- cv.glmnet(x, y, alpha = 1)
bestlam <- cv.out$lambda.min
bestlam
x <- model.matrix(Height ~ Age + I(Age^2) + I(Age^3) + I(Age^4) + I(Age^5), data = health_df)
# x <- model.matrix(Height ~ Age + Age2 + Age3 + Age4 + Age5, data = health_df %>% mutate(Age2 = Age^2, Age3 = Age^3, Age4 = Age^4, Age5 = Age^5))[, -1]
y <- health_df$Height
cv.out <- cv.glmnet(x, y, alpha = 1)
bestlam <- cv.out$lambda.min
bestlam
x
cv.out <- cv.glmnet(x, y, alpha = 1)
plot(cv.out)
glm_model_1 <- glm(dia_yes ~ BMI, family = binomial(link = "logit"), data = health_df)
summary(glm_model_1)
glm_model_2 <- glm(dia_yes ~ BMI + male + Age, family = binomial(link = "logit"), data = health_df)
summary(glm_model_2)
glm_model_3 <- glm(dia_yes ~ BMI + male + Age + white + black, family = binomial(link = "logit"), data = health_df)
summary(glm_model_3)
glm_model_4 <- glm(dia_yes ~ BMI + male + Age + white + black + income_high + income_low, family = binomial(link = "logit"), data = health_df)
summary(glm_model_4)
glm_model_5 <- glm(dia_yes ~ BMI + male + Age + white + black + income_high + income_low + hs + own, family = binomial(link = "logit"), data = health_df)
summary(glm_model_5)
plot(c(glm_model_1$coefficients[2], glm_model_2$coefficients[2], glm_model_3$coefficients[2], glm_model_4$coefficients[2], glm_model_4$coefficients[2]), xlab = "model number", ylab = "coef")
library(vecsets)
valid <- seq(from = 10, to = nrow(health_df), by = 10)
train <- vecsets::vsetdiff( 1:nrow(health_df), valid)
glm_model_1 <- glm(dia_yes ~ BMI, family = binomial(link = "logit"), data = health_df[train, ])
glm_model_2 <- glm(dia_yes ~ BMI + male + Age, family = binomial(link = "logit"), data = health_df[train, ])
glm_model_3 <- glm(dia_yes ~ BMI + male + Age + white + black, family = binomial(link = "logit"), data = health_df[train, ])
glm_model_4 <- glm(dia_yes ~ BMI + male + Age + white + black + income_high + income_low, family = binomial(link = "logit"), data = health_df[train, ])
glm_model_5 <- glm(dia_yes ~ BMI + male + Age + white + black + income_high + income_low + hs + own, family = binomial(link = "logit"), data = health_df[train, ])
glm_model_5 <- glm(dia_yes ~ BMI + male + Age + white + black + income_high + income_low + hs + own, family = binomial(link = "logit"), data = health_df[train, ])
glm_tr_pred_1 <- predict(glm_model_1, health_df[train, ])
glm_tr_prob_1 <- exp(glm_tr_pred_1) / (1 + exp(glm_tr_pred_1))
glm_tr_bin_1 <- ifelse(glm_tr_prob_1 >= 0.5, 1, 0)
tr_acc_1 <- sum(glm_tr_bin_1 == health_df[train, ]$dia_yes) / length(train)
glm_tr_pred_2 <- predict(glm_model_2, health_df[train, ])
glm_tr_prob_2 <- exp(glm_tr_pred_2) / (1 + exp(glm_tr_pred_2))
glm_tr_bin_2 <- ifelse(glm_tr_prob_2 >= 0.5, 1, 0)
tr_acc_2 <- sum(glm_tr_bin_2 == health_df[train, ]$dia_yes) / length(train)
glm_tr_pred_3 <- predict(glm_model_3, health_df[train, ])
glm_tr_prob_3 <- exp(glm_tr_pred_3) / (1 + exp(glm_tr_pred_3))
glm_tr_bin_3 <- ifelse(glm_tr_prob_3 >= 0.5, 1, 0)
tr_acc_3 <- sum(glm_tr_bin_3 == health_df[train, ]$dia_yes) / length(train)
glm_tr_pred_4 <- predict(glm_model_4, health_df[train, ])
glm_tr_prob_4 <- exp(glm_tr_pred_4) / (1 + exp(glm_tr_pred_4))
glm_tr_bin_4 <- ifelse(glm_tr_prob_4 >= 0.5, 1, 0)
tr_acc_4 <- sum(glm_tr_bin_4 == health_df[train, ]$dia_yes) / length(train)
glm_tr_pred_5 <- predict(glm_model_5, health_df[train, ])
glm_tr_prob_5 <- exp(glm_tr_pred_5) / (1 + exp(glm_tr_pred_5))
glm_tr_bin_5 <- ifelse(glm_tr_prob_5 >= 0.5, 1, 0)
tr_acc_5 <- sum(glm_tr_bin_5 == health_df[train, ]$dia_yes) / length(train)
tr_acc <- c(tr_acc_1, tr_acc_2, tr_acc_3, tr_acc_4, tr_acc_5)
plot(tr_acc, xlab = "model number", ylab = "train accuracy")
